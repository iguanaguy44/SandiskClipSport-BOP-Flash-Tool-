

Next: Flash Programming, Previous: CPU Configuration, Up: Top   [Contents][Index]
12 Flash Commands

OpenOCD has different commands for NOR and NAND flash; the “flash” command works with NOR flash, while the “nand” command works with NAND flash. This partially reflects different hardware technologies: NOR flash usually supports direct CPU instruction and data bus access, while data from a NAND flash must be copied to memory before it can be used. (SPI flash must also be copied to memory before use.) However, the documentation also uses “flash” as a generic term; for example, “Put flash configuration in board-specific files”.

Flash Steps:

    Configure via the command flash bank
    Do this in a board-specific configuration file, passing parameters as needed by the driver.
    Operate on the flash via flash subcommand
    Often commands to manipulate the flash are typed by a human, or run via a script in some automated way. Common tasks include writing a boot loader, operating system, or other data.
    GDB Flashing
    Flashing via GDB requires the flash be configured via “flash bank”, and the GDB flash features be enabled. See GDB Configuration. 

Many CPUs have the ability to “boot” from the first flash bank. This means that misprogramming that bank can “brick” a system, so that it can’t boot. JTAG tools, like OpenOCD, are often then used to “de-brick” the board by (re)installing working boot firmware.
12.1 Flash Configuration Commands

Config Command: flash bank name driver base size chip_width bus_width target [driver_options]

    Configures a flash bank which provides persistent storage for addresses from base to base + size - 1. These banks will often be visible to GDB through the target’s memory map. In some cases, configuring a flash bank will activate extra commands; see the driver-specific documentation.

        name ... may be used to reference the flash bank in other flash commands. A number is also available.
        driver ... identifies the controller driver associated with the flash bank being declared. This is usually cfi for external flash, or else the name of a microcontroller with embedded flash memory. See Flash Driver List.
        base ... Base address of the flash chip.
        size ... Size of the chip, in bytes. For some drivers, this value is detected from the hardware.
        chip_width ... Width of the flash chip, in bytes; ignored for most microcontroller drivers.
        bus_width ... Width of the data bus used to access the chip, in bytes; ignored for most microcontroller drivers.
        target ... Names the target used to issue commands to the flash controller.
        driver_options ... drivers may support, or require, additional parameters. See the driver-specific documentation for more information. 

        Note: This command is not available after OpenOCD initialization has completed. Use it in board specific configuration files, not interactively. 

Command: flash banks

    Prints a one-line summary of each device that was declared using flash bank, numbered from zero. Note that this is the plural form; the singular form is a very different command. 

Command: flash list

    Retrieves a list of associative arrays for each device that was declared using flash bank, numbered from zero. This returned list can be manipulated easily from within scripts. 

Command: flash probe num

    Identify the flash, or validate the parameters of the configured flash. Operation depends on the flash type. The num parameter is a value shown by flash banks. Most flash commands will implicitly autoprobe the bank; flash drivers can distinguish between probing and autoprobing, but most don’t bother. 

12.2 Preparing a Target before Flash Programming

The target device should be in well defined state before the flash programming begins.

Always issue reset init before Flash Programming Commands. Do not issue another reset or reset halt or resume until the programming session is finished.

If you use Programming using GDB, the target is prepared automatically in the event gdb-flash-erase-start

The jimtcl script program calls reset init explicitly.
12.3 Erasing, Reading, Writing to Flash

One feature distinguishing NOR flash from NAND or serial flash technologies is that for read access, it acts exactly like any other addressable memory. This means you can use normal memory read commands like mdw or dump_image with it, with no special flash subcommands. See Memory access, and Image access.

Write access works differently. Flash memory normally needs to be erased before it’s written. Erasing a sector turns all of its bits to ones, and writing can turn ones into zeroes. This is why there are special commands for interactive erasing and writing, and why GDB needs to know which parts of the address space hold NOR flash memory.

    Note: Most of these erase and write commands leverage the fact that NOR flash chips consume target address space. They implicitly refer to the current JTAG target, and map from an address in that target’s address space back to a flash bank. A few commands use abstract addressing based on bank and sector numbers, and don’t depend on searching the current target and its address space. Avoid confusing the two command models. 

Some flash chips implement software protection against accidental writes, since such buggy writes could in some cases “brick” a system. For such systems, erasing and writing may require sector protection to be disabled first. Examples include CFI flash such as “Intel Advanced Bootblock flash”, and AT91SAM7 on-chip flash. See flash protect.

Command: flash erase_sector num first last

    Erase sectors in bank num, starting at sector first up to and including last. Sector numbering starts at 0. Providing a last sector of last specifies "to the end of the flash bank". The num parameter is a value shown by flash banks. 

Command: flash erase_address [pad] [unlock] address length

    Erase sectors starting at address for length bytes. Unless pad is specified, address must begin a flash sector, and address + length - 1 must end a sector. Specifying pad erases extra data at the beginning and/or end of the specified region, as needed to erase only full sectors. The flash bank to use is inferred from the address, and the specified length must stay within that bank. As a special case, when length is zero and address is the start of the bank, the whole flash is erased. If unlock is specified, then the flash is unprotected before erase starts. 

Command: flash filld address double-word length
Command: flash fillw address word length
Command: flash fillh address halfword length
Command: flash fillb address byte length

    Fills flash memory with the specified double-word (64 bits), word (32 bits), halfword (16 bits), or byte (8-bit) pattern, starting at address and continuing for length units (word/halfword/byte). No erasure is done before writing; when needed, that must be done before issuing this command. Writes are done in blocks of up to 1024 bytes, and each write is verified by reading back the data and comparing it to what was written. The flash bank to use is inferred from the address of each block, and the specified length must stay within that bank. 

Command: flash mdw addr [count]
Command: flash mdh addr [count]
Command: flash mdb addr [count]

    Display contents of address addr, as 32-bit words (mdw), 16-bit halfwords (mdh), or 8-bit bytes (mdb). If count is specified, displays that many units. Reads from flash using the flash driver, therefore it enables reading from a bank not mapped in target address space. The flash bank to use is inferred from the address of each block, and the specified length must stay within that bank. 

Command: flash write_bank num filename [offset]

    Write the binary filename to flash bank num, starting at offset bytes from the beginning of the bank. If offset is omitted, start at the beginning of the flash bank. The num parameter is a value shown by flash banks. 

Command: flash read_bank num filename [offset [length]]

    Read length bytes from the flash bank num starting at offset and write the contents to the binary filename. If offset is omitted, start at the beginning of the flash bank. If length is omitted, read the remaining bytes from the flash bank. The num parameter is a value shown by flash banks. 

Command: flash verify_bank num filename [offset]

    Compare the contents of the binary file filename with the contents of the flash bank num starting at offset. If offset is omitted, start at the beginning of the flash bank. Fail if the contents do not match. The num parameter is a value shown by flash banks. 

Command: flash write_image [erase] [unlock] filename [offset] [type]

    Write the image filename to the current target’s flash bank(s). Only loadable sections from the image are written. A relocation offset may be specified, in which case it is added to the base address for each section in the image. The file [type] can be specified explicitly as bin (binary), ihex (Intel hex), elf (ELF file), s19 (Motorola s19). mem, or builder. The relevant flash sectors will be erased prior to programming if the erase parameter is given. If unlock is provided, then the flash banks are unlocked before erase and program. The flash bank to use is inferred from the address of each image section.

        Warning: Be careful using the erase flag when the flash is holding data you want to preserve. Portions of the flash outside those described in the image’s sections might be erased with no notice.

            When a section of the image being written does not fill out all the sectors it uses, the unwritten parts of those sectors are necessarily also erased, because sectors can’t be partially erased.
            Data stored in sector "holes" between image sections are also affected. For example, "flash write_image erase ..." of an image with one byte at the beginning of a flash bank and one byte at the end erases the entire bank – not just the two sectors being written. 

        Also, when flash protection is important, you must re-apply it after it has been removed by the unlock flag. 

Command: flash verify_image filename [offset] [type]

    Verify the image filename to the current target’s flash bank(s). Parameters follow the description of ’flash write_image’. In contrast to the ’verify_image’ command, for banks with specific verify method, that one is used instead of the usual target’s read memory methods. This is necessary for flash banks not readable by ordinary memory reads. This command gives only an overall good/bad result for each bank, not addresses of individual failed bytes as it’s intended only as quick check for successful programming. 

12.4 Other Flash commands

Command: flash erase_check num

    Check erase state of sectors in flash bank num, and display that status. The num parameter is a value shown by flash banks. 

Command: flash info num [sectors]

    Print info about flash bank num, a list of protection blocks and their status. Use sectors to show a list of sectors instead.

    The num parameter is a value shown by flash banks. This command will first query the hardware, it does not print cached and possibly stale information. 

Command: flash protect num first last (on|off)

    Enable (on) or disable (off) protection of flash blocks in flash bank num, starting at protection block first and continuing up to and including last. Providing a last block of last specifies "to the end of the flash bank". The num parameter is a value shown by flash banks. The protection block is usually identical to a flash sector. Some devices may utilize a protection block distinct from flash sector. See flash info for a list of protection blocks. 

Command: flash padded_value num value

    Sets the default value used for padding any image sections, This should normally match the flash bank erased value. If not specified by this command or the flash driver then it defaults to 0xff. 

Command: program filename [preverify] [verify] [reset] [exit] [offset]

    This is a helper script that simplifies using OpenOCD as a standalone programmer. The only required parameter is filename, the others are optional. See Flash Programming. 

12.5 Flash Driver List

As noted above, the flash bank command requires a driver name, and allows driver-specific options and behaviors. Some drivers also activate driver-specific commands.

Flash Driver: virtual

    This is a special driver that maps a previously defined bank to another address. All bank settings will be copied from the master physical bank.

    The virtual driver defines one mandatory parameters,

        master_bank The bank that this virtual address refers to. 

    So in the following example addresses 0xbfc00000 and 0x9fc00000 refer to the flash bank defined at address 0x1fc00000. Any command executed on the virtual banks is actually performed on the physical banks.

    flash bank $_FLASHNAME pic32mx 0x1fc00000 0 0 0 $_TARGETNAME
    flash bank vbank0 virtual 0xbfc00000 0 0 0 \
               $_TARGETNAME $_FLASHNAME
    flash bank vbank1 virtual 0x9fc00000 0 0 0 \
               $_TARGETNAME $_FLASHNAME

12.5.1 External Flash

Flash Driver: cfi

    The “Common Flash Interface” (CFI) is the main standard for external NOR flash chips, each of which connects to a specific external chip select on the CPU. Frequently the first such chip is used to boot the system. Your board’s reset-init handler might need to configure additional chip selects using other commands (like: mww to configure a bus and its timings), or perhaps configure a GPIO pin that controls the “write protect” pin on the flash chip. The CFI driver can use a target-specific working area to significantly speed up operation.

    The CFI driver can accept the following optional parameters, in any order:

        jedec_probe ... is used to detect certain non-CFI flash ROMs, like AM29LV010 and similar types.
        x16_as_x8 ... when a 16-bit flash is hooked up to an 8-bit bus.
        bus_swap ... when data bytes in a 16-bit flash needs to be swapped.
        data_swap ... when data bytes in a 16-bit flash needs to be swapped when writing data values (i.e. not CFI commands). 

    To configure two adjacent banks of 16 MBytes each, both sixteen bits (two bytes) wide on a sixteen bit bus:

    flash bank $_FLASHNAME cfi 0x00000000 0x01000000 2 2 $_TARGETNAME
    flash bank $_FLASHNAME cfi 0x01000000 0x01000000 2 2 $_TARGETNAME

    To configure one bank of 32 MBytes built from two sixteen bit (two byte) wide parts wired in parallel to create a thirty-two bit (four byte) bus with doubled throughput:

    flash bank $_FLASHNAME cfi 0x00000000 0x02000000 2 4 $_TARGETNAME

Flash Driver: jtagspi

    Several FPGAs and CPLDs can retrieve their configuration (bitstream) from a SPI flash connected to them. To access this flash from the host, some FPGA device provides dedicated JTAG instructions, while other FPGA devices should be programmed with a special proxy bitstream that exposes the SPI flash on the device’s JTAG interface. The flash can then be accessed through JTAG.

    Since signalling between JTAG and SPI is compatible, all that is required for a proxy bitstream is to connect TDI-MOSI, TDO-MISO, TCK-CLK and activate the flash chip select when the JTAG state machine is in SHIFT-DR.

    Such a bitstream for several Xilinx FPGAs can be found in contrib/loaders/flash/fpga/xilinx_bscan_spi.py. It requires migen and a Xilinx toolchain to build.

    This mechanism with a proxy bitstream can also be used for FPGAs from Intel and Efinix. FPGAs from Lattice and Cologne Chip have dedicated JTAG instructions and procedure to connect the JTAG to the SPI signals and don’t need a proxy bitstream. Support for these devices with dedicated procedure is provided by the pld drivers. For convenience the PLD drivers will provide the USERx code for FPGAs with a proxy bitstream. Currently the following PLD drivers are able to support jtagspi:

        Efinix: proxy-bitstream
        Gatemate: dedicated procedure
        Intel/Altera: proxy-bitstream
        Lattice: dedicated procedure supporting ECP2, ECP3, ECP5, Certus and Certus Pro devices
        AMD/Xilinx: proxy-bitstream 

    This flash bank driver requires a target on a JTAG tap and will access that tap directly. Since no support from the target is needed, the target can be a "testee" dummy. Since the target does not expose the flash memory mapping, target commands that would otherwise be expected to access the flash will not work. These include all *_image and $target_name m* commands as well as program. Equivalent functionality is available through the flash write_bank, flash read_bank, and flash verify_bank commands.

    According to device size, 1- to 4-byte addresses are sent. However, some flash chips additionally have to be switched to 4-byte addresses by an extra command, see below.

        ir ... is loaded into the JTAG IR to map the flash as the JTAG DR. For the bitstreams generated from xilinx_bscan_spi.py this is the USER1 instruction.

        target create $_TARGETNAME testee -chain-position $_CHIPNAME.tap
        set _USER1_INSTR_CODE 0x02
        flash bank $_FLASHNAME jtagspi 0x0 0 0 0 \
                   $_TARGETNAME $_USER1_INSTR_CODE

        The option -pld name is used to have support from the PLD driver of pld device name. The name is the name of the pld device given during creation of the pld device. Pld device names are shown by the pld devices command.

        target create $_TARGETNAME testee -chain-position $_CHIPNAME.tap
        set _JTAGSPI_CHAIN_ID $_CHIPNAME.pld
        flash bank $_FLASHNAME jtagspi 0x0 0 0 0 \
                   $_TARGETNAME -pld $_JTAGSPI_CHAIN_ID

    Command: jtagspi set bank_id name total_size page_size read_cmd unused pprg_cmd mass_erase_cmd sector_size sector_erase_cmd

        Sets flash parameters: name human readable string, total_size size in bytes, page_size is write page size. read_cmd and pprg_cmd are commands for read and page program, respectively. mass_erase_cmd, sector_size and sector_erase_cmd are optional.

        jtagspi set 0 w25q128 0x1000000 0x100 0x03 0 0x02 0xC7 0x10000 0xD8

    Command: jtagspi cmd bank_id resp_num cmd_byte ...

        Sends command cmd_byte and at most 20 following bytes and reads resp_num bytes afterwards. E.g. for ’Enter 4-byte address mode’

        jtagspi cmd 0 0 0xB7

    Command: jtagspi always_4byte bank_id [ on | off ]

        Some devices use 4-byte addresses for all commands except the legacy 0x03 read regardless of device size. This command controls the corresponding hack. 

Flash Driver: xcf

    Xilinx FPGAs can be configured from specialized flash ICs named Platform Flash. It is (almost) regular NOR flash with erase sectors, program pages, etc. The only difference is special registers controlling its FPGA specific behavior. They must be properly configured for successful FPGA loading using additional xcf driver command:

    Command: xcf ccb <bank_id>

        command accepts additional parameters:

            external|internal ... selects clock source.
            serial|parallel ... selects serial or parallel data bus mode.
            slave|master ... selects slave of master mode for flash device.
            40|20 ... selects clock frequency in MHz for internal clock in master mode. 

        xcf ccb 0 external parallel slave 40

        All of them must be specified even if clock frequency is pointless in slave mode. If only bank id specified than command prints current CCB register value. Note: there is no need to write this register every time you erase/program data sectors because it stores in dedicated sector. 

    Command: xcf configure <bank_id>

        Initiates FPGA loading procedure. Useful if your board has no "configure" button.

        xcf configure 0

    Additional driver notes:

        Only single revision supported.
